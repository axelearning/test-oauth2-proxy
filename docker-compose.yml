networks:
  app-network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
  portainer_data:
  postgres_data:
  metabase_data:
  dagster_data:

services:

  caddy:
    image: caddy:2.10-alpine
    container_name: caddy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infrastructure/caddy:/etc/caddy:ro
      - ./logs/caddy:/var/log/caddy
      - ./infrastructure/admin-portal:/usr/share/caddy/admin-html:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - metabase
      # - dagster-webserver
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:80/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  database:
    image: pgduckdb/pgduckdb:16-v0.3.1
    container_name: database
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    ports:
      - '5432:5432'
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  pgweb:
    image: sosedoff/pgweb:0.16.2
    container_name: pgweb
    environment:
      PGWEB_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - database
    healthcheck:
      test: curl -f http://localhost:8081/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  metabase:
    image: metabase/metabase:v0.55.9
    container_name: metabase
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${POSTGRES_DB}
      MB_DB_HOST: ${POSTGRES_HOST}
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_PORT: 5432
      MB_SITE_URL: https://dashboard.axelrasse.com
      MB_SAMPLE_DATABASE: false
    volumes:
      - metabase_data:/metabase-data
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - database
    healthcheck:
      test: curl --fail http://localhost:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3


  # dagster-daemon:
  #   image: dagster/dagster-celery-docker:latest
  #   container_name: dagster-daemon
  #   entrypoint:
  #     - dagster-daemon
  #     - run
  #   environment:
  #     DAGSTER_POSTGRES_USER: ${POSTGRES_USER}
  #     DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     DAGSTER_POSTGRES_DB: ${POSTGRES_DB}
  #     DAGSTER_POSTGRES_HOSTNAME: ${POSTGRES_HOST}
  #     DAGSTER_POSTGRES_PORT: 5432
  #   volumes:
  #     - dagster_data:/opt/dagster/dagster_home
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   depends_on:
  #     - database

  # dagster-webserver:
  #   image: dagster/dagster-celery-docker:latest
  #   container_name: dagster-webserver
  #   entrypoint:
  #     - dagster-webserver
  #     - -h
  #     - 0.0.0.0
  #     - -p
  #     - '3000'
  #   environment:
  #     DAGSTER_POSTGRES_USER: ${POSTGRES_USER}
  #     DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     DAGSTER_POSTGRES_DB: ${POSTGRES_DB}
  #     DAGSTER_POSTGRES_HOSTNAME: ${POSTGRES_HOST}
  #     DAGSTER_POSTGRES_PORT: 5432
  #   volumes:
  #     - dagster_data:/opt/dagster/dagster_home
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   depends_on:
  #     - database
  #     - dagster-daemon

  glances:
    image: nicolargo/glances:4.3.2
    container_name: glances
    environment:
      - GLANCES_OPT=-w
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    networks:
      - app-network
    restart: unless-stopped
    pid: host
    healthcheck:
      test: curl -f http://localhost:61208/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  portainer:
    image: portainer/portainer-ce:2.32.0
    container_name: portainer
    command:
      [
        '--admin-password','${PORTAINER_ADMIN_HASH_PASSWORD}',
        '--trusted-origins','admin.axelrasse.com',
      ]
    ports:
      - '9000:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app-network
    restart: unless-stopped

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.10.0-alpine
    container_name: oauth2-proxy
    command:
      - --config=/etc/oauth2-proxy.cfg
    environment:
      OAUTH2_PROXY_CLIENT_ID: ${GITHUB_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${COOKIE_SECRET}
    volumes:
      - ./infrastructure/oauth2-proxy/oauth2-proxy.cfg:/etc/oauth2-proxy.cfg:ro
    ports:
      - '4180:4180'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:4180/ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
